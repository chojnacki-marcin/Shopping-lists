#Datasource configuration
spring.jpa.hibernate.ddl-auto=create
spring.datasource.url=jdbc:postgresql://localhost:5432/shopping-list
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Thymeleaf
#for development purposes
# Templates reloading during development
#spring.thymeleaf.prefix=classpath*:/templates/
spring.thymeleaf.cache=false

# Static resources reloading during development
#spring.resources.static-locations=file:src/main/resources/static/
spring.resources.cache.period=0

#oauth configuration

#google configuration
security.oauth2.client.clientId = ${GOOGLE_ID}
security.oauth2.client.clientSecret = ${GOOGLE_SECRET}
security.oauth2.client.accessTokenUri = https://www.googleapis.com/oauth2/v4/token
security.oauth2.client.userAuthorizationUri = https://accounts.google.com/o/oauth2/v2/auth
security.oauth2.client.clientAuthenticationScheme = form
security.oauth2.client.token-name=authorization_code
security.oauth2.client.scope=openid profile
security.oauth2.resource.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo



#security.oauth2.client.clientId= client
#security.oauth2.client.clientSecret= secret
#security.oauth2.client.accessTokenUri= http://localhost:8090/oauth/token
#security.oauth2.client.userAuthorizationUri= http://localhost:8090/oauth/authorize
#security.oauth2.client.clientAuthenticationScheme= form
#security.oauth2.client.token-name=access_token
#security.oauth2.resource.user-info-uri=http://localhost:8090/me



#security.oauth2.client.clientId= client
#security.oauth2.client.clientSecret= secret
#security.oauth2.client.userAuthorizationUri= http://localhost:8090/oauth/authorize
#security.oauth2.client.access-token-uri=http://localhost:8090/oauth/token
#security.oauth2.client.clientAuthenticationScheme= form
#security.oauth2.resource.user-info-uri= http://localhost:8090/me
